# === Stage 1: Dependencies ===
FROM node:20-alpine AS deps

# Install pnpm
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package.json and pnpm-lock.yaml
COPY package.json pnpm-lock.yaml ./

# Install dependencies using pnpm
RUN pnpm install --frozen-lockfile

# === Stage 2: Builder ===
FROM node:20-alpine AS builder

# Install pnpm
RUN npm install -g pnpm

WORKDIR /app

# Copy dependencies from the previous stage
COPY --from=deps /app/node_modules ./node_modules

# Copy the rest of the application code
# Note: Ensure .dockerignore excludes node_modules if copying everything
COPY . .

# Build the Next.js application
# Add NEXT_PUBLIC_API_URL build argument (can be set in docker-compose)
ARG NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
RUN pnpm build

# === Stage 3: Runner ===
FROM node:20-alpine AS runner

WORKDIR /app

ENV NODE_ENV=production
# Uncomment the following line in case compatibility issues arise like ERR_OSSL_EVP_UNSUPPORTED
# ENV NODE_OPTIONS=--openssl-legacy-provider

# Install pnpm (needed to run start script)
RUN npm install -g pnpm

# Copy package.json and pnpm-lock.yaml to install *only* production dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --prod --frozen-lockfile

# Copy built artifacts from the builder stage
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next

# Copy Next.js config file
COPY --from=builder /app/next.config.mjs ./next.config.mjs

# Expose the port Next.js runs on (default 3000)
EXPOSE 3000

# Set the user for security (optional but good practice)
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs
# USER nextjs

# Command to run the app
CMD ["pnpm", "start"] 